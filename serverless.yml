service: todo-serverless

package:
  individually: true
  exclude:
    - .eslintrc
    - LICENSE
    - .yo-rc.json
    - README.md
    - yarn.lock

custom:
  project: "todo-serverless"
  stage: ${opt:stage, self:provider.stage}
  dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
  settings:
    dev:
      STAGE: ${self:custom.stage}
      NODE_ENV: "develop"
      TABLE_NAME_TODO: todo-${self:custom.stage}

plugins:
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.dev.TABLE_NAME_TODO}

provider:
  name: aws
  region: us-east-1
  stage: dev
  runtime: nodejs16.x
  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
        - dynamodb:*      
      Resource:
        - "*"
  environment:
    STAGE: ${self:custom.stage}
    NODE_ENV: ${self:custom.settings.dev.NODE_ENV}
    TABLE_NAME_TODO: ${self:custom.settings.dev.TABLE_NAME_TODO}
    LOCAL_DYNAMODB_END_POINT: http://localhost:8000

functions:
  hello:
    handler: src/index.hello
    name: ${self:custom.project}-${self:custom.stage}-hello
    events:
      - http:
          method: get
          path: hello
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true

  createTodoV1:
    handler: src/index.createTodoV1
    name: ${self:custom.project}-${self:custom.stage}-v1-createTodo
    events:
      - http:
          method: post
          path: v1/todo
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true
            
  getTodoV1:
    handler: src/index.getTodoV1
    name: ${self:custom.project}-${self:custom.stage}-v1-getTodo
    events:
      - http:
          method: get
          path: v1/todo/{id}
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true
            
  updateTodoV1:
    handler: src/index.updateTodoV1
    name: ${self:custom.project}-${self:custom.stage}-v1-updateTodo
    events:
      - http:
          method: put
          path: v1/todo/{id}
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true
            
  deleteTodoV1:
    handler: src/index.deleteTodoV1
    name: ${self:custom.project}-${self:custom.stage}-v1-deleteTodo
    events:
      - http:
          method: delete
          path: v1/todo/{id}
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true
            
  listTodoV1:
    handler: src/index.listTodoV1
    name: ${self:custom.project}-${self:custom.stage}-v1-listTodo
    events:
      - http:
          method: get
          path: v1/todo
          cors:
            origin: "*"
            headers:
              - "*"
            allowCredentials: true
